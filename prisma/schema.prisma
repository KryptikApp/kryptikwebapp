generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @unique @default(uuid())
  email         String?         @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  oneTimeTokens OneTimeToken[]
  Profile       Profile?
  refreshTokens RefreshToken[]
  remoteShare   RemoteShare?
  blockchainAccount BlockchainAccount?
  tempSyncKey TempSyncKey?
  syncSession SyncSession?
  Authenticator Authenticator[]
  AuthenticatorChallenge AuthenticatorChallenge?
  // many to many
  CompletedWalletActions WalletAction[]
}

// many users can own an action and an action can be owned by many users
model WalletAction{
  id         Int      @id @default(autoincrement())
  title      String
  description String
  createdAt  DateTime @default(now())
  hexColor   String
  imgPath    String?
  Users   User[]
}

model AppContract{
  // identifiers
  id         Int     @id @default(autoincrement())
  createdAt DateTime @default(now())
  address    String  @unique
  networkId  Int
  // meta
  name       String
  tags       String[]
  description String
  icon      String
  url       String
  // ststa
  totalTransactionsLastHour Int
  lastBlockChecked Int
  updatedAt DateTime @updatedAt
  // relations
  NetworkDb  NetworkDb @relation(fields: [networkId], references: [id], onDelete: Cascade)
}

model PaymentLink{
  id        Int     @id @default(autoincrement())
  name      String @default(uuid()) @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  done      Boolean @default(false)
  backgroundImagePath String @default("")
  tokenImagePath String @default("")
  amountPerClaim Float
  amountPerClaimUsd Float @default(0)
  networkTicker String
  title String
  description String @default("")
  maxClaims Int
  claimCount Int @default(0)
  blockList String[]
}

model Authenticator {
  // SQL: Encode to base64url then store as `TEXT`. Index this column
  credentialID  String @id @unique
  // SQL: Store raw bytes as `BYTEA`/`BLOB`/etc...
  credentialPublicKey Bytes
  // SQL: Consider `BIGINT` since some authenticators return atomic timestamps as counters
  counter Int
  // SQL: `VARCHAR(32)` or similar, longest possible value is currently 12 characters
  // Ex: 'singleDevice' | 'multiDevice'
  credentialDeviceType String
  name String
  // SQL: `BOOL` or whatever similar type is supported
  credentialBackedUp Boolean
  // SQL: `VARCHAR(255)` and store string array as a CSV string
  // Ex: ['usb' | 'ble' | 'nfc' | 'internal']
  transports String?
  // user id
  userId String
  createdAt   DateTime @default(now())
  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AuthenticatorChallenge{
  id        Int      @id @default(autoincrement())
  challenge String 
  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RemoteShare {
  id        Int      @id @default(autoincrement())
  share     String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Profile {
  id         Int     @id @default(autoincrement())
  name       String?
  bio        String?
  userId     String  @unique
  avatarPath String?
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userId      String
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model OneTimeToken {
  id         String   @id @unique @default(uuid())
  userId     String
  code       String
  expiration DateTime
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
// no server share, but share on local... sync w/ other device
// be wary of new login and no share on server... don't want to overwrite
// maybe only create wallet if user doesn't exist on server upon script fire?
model TempSyncKey{
  id         String   @id @unique @default(uuid())
  userId     String   @unique
  expiration DateTime
  iv         String
  key        String
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model SyncSession{
  id         String   @id @unique @default(uuid())
  userId     String   @unique
  expiration DateTime
  pairIndex  Int  @default(0)
  confirmed  Boolean @default(false)
  totalToPair Int
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NetworkDb {
  id                Int             @id @default(autoincrement())
  about             String
  chainId           Float
  decimals          Float
  fullName          String          @unique
  iconPath          String
  isSupported       Boolean
  whitePaperPath    String
  blockExplorerURL  String
  blockchainId      String
  ticker            String          @unique
  provider          String
  zeroXSwapUrl      String?
  coingeckoId       String
  hexColor          String
  isTestnet         Boolean?
  networkFamilyName String
  TokenContract     TokenContract[]
  AppContract       AppContract[]
}

model TokenDb {
  id            Int             @id @default(autoincrement())
  coingeckoId   String
  description   String
  link          String
  hexColor      String
  logoURI       String
  name          String          @unique
  tags          String[]
  decimals      Float
  ticker        String          @unique
  TokenContract TokenContract[]
}

model TokenContract {
  id         Int       @id @default(autoincrement())
  address    String
  networkId  Int
  tokenId    Int
  contractId String    @unique
  NetworkDb  NetworkDb @relation(fields: [networkId], references: [id], onDelete: Cascade)
  TokenDb    TokenDb   @relation(fields: [tokenId], references: [id], onDelete: Cascade)
}

model BlockchainAccount{
  id         Int       @id @default(autoincrement())
  evmAddress String
  solAddress String
  nearAddress String
  userId     String  @unique
  user       User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Price{
  ticker String @unique
  coinGeckoId String @unique
  price Float
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}
